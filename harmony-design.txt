// Harmony

// TODO: Paint in the texture a closed door for the bomb to fall.
// What are the important details for the models? 

// Night mode, mini map, propellers, projectiles, move cannon with mouse, enemies, collision, reset, "random" movement, 


// The user can control the cannon direction with the mouse.
// There are two axis of rotation that are controlled by the mouse.
// When the airplane dies, there is a screen with dead or alive
==============================
Main
------------------------------
// All of the bullets that aren't dead are saved to continue moving through space.
bullets: a queue of bullets that when a bullet dies, it is removed from it.
collect memory garbage
------------------------------
display()
	IF player is dead THEN
		draw "You lost" on the middle of screen
	ELSE IF player won THEN
		draw "You win" on the middle of screen
	draw current score on top-right of the window 
	FOR EACH projectile
		projectile.draw()
------------------------------
addResetListener(ResetListener): void 
------------------------------
reset()
	FOR EACH reset listener
		listener.reset()
	remove all projectiles // bombs and bullets
------------------------------
idle()	
	// detect collision of each projectile with an obstacle
	FOR EACH projectile
		move projectile
		IF projectile is dead THEN
			remove projectile from queue
	remove all projectiles that died

	// make random movements for each enemy
	FOR EACH enemy
		compute enemy next position
==============================















// *** Airstrip ***



// The airstrip has light points on each side of it and there are painting
// tracks at each side as well. The airstrip though is constructed with a
// line that comes from the SVG file and must be converted to an actual
// airstrip. The width of the player influences the width of the airstrip, 
// but the airstrip considers that the width is already fixed.
==============================
Airstrip
------------------------------
// The line is used to know the start and end of the airstrip, while the
// width is used to know the sideways of the airstrip. This is twice the
// airplane diameter.
Airstrip(line, width)
------------------------------
setStripes(count)
------------------------------
draw()
	draw light
		get current light position
		put a light at left and right of the sides
	draw ground
		load black texture
	draw stripes
		load white texture
------------------------------
through time()
	get time elaspsed since last call
	IF accumulated time + elapsed time > time interval of each stripe THEN
		next stripe
	accumulate elapsed time
next stripe()
	IF last stripe THEN
		set as first stripe
	ELSE
		set as stripe + 1
==============================


// *** Cannon ***


==============================
Cannon
------------------------------
static
	load cannon model
------------------------------
getExit()
	return offset + direction * cannon length
getDirection()
	// use the same algorithm as the others
	r = cos(vertical)
	x = r * cos(horizontal)
	y = r * sin(horizontal)
	z = sin(vertical)
	return <x, y, z>
==============================



==============================
Player
------------------------------
fire()
	get cannon position
	get cannon direction
	get airplane velocity
	create bullet
	attach to Game the bullet as projectile
bomb()
	get door position
	get airplane velocity xy
	create bomb
	attach to Game the bomb as projectile
==============================






// *** Map ***




==============================
MapItem: interface
------------------------------
drawMap(): void
==============================

// subclasses that implements MapItem: Airplane, Arena, Tank, Airstrip




// *** Firing with the gun, bomb ***



/**
 * A class that keeps track of all projectiles and hadling collision between the
 * projectiles and obstacles. Both projectiles and obstacles can be added.
 */
==============================
projectile_manager_t
------------------------------
/**
 * Obstacles that cannot die, but can stop a projectile.
 */
inanimate obstacles
/**
 * Obstacles that can die and stops a projectile.
 */
animated obstacles
------------------------------
projectiles: a list of projectiles
------------------------------
addObstacles(obs, animated)
addProjectile(p)
------------------------------
update(millis)
==============================


==============================
bullet: projectile
------------------------------
enemy: bool
------------------------------
onRun()
	IF is from an enemy THEN
		IF the bullet hit the player THEN
			kill the bullet
			kill the player
	ELSE
		IF bullet hit an enemy THEN
			kill the bullet
			kill the enemy
			score
==============================


// A sphere used for collision.
==============================
Obstacle
------------------------------
overlaps(sphere)
==============================


==============================
Bomb: projectile
------------------------------
acceleration z
------------------------------
Bomb()
static
	load bomb model
------------------------------
onRun()
	IF hit an obstacle
		remove bomb
                if the obstacle is an enemy
                    kill it
	ELSE
		update velocity at z axis
------------------------------
draw(): void
	uses the bomb model
==============================


==============================
projectile
------------------------------
position
velocity
------------------------------
accumulated time
------------------------------
dead: bool
------------------------------
transformAndDraw(): void
draw(): void, abstract 
    IF alive THEN
        transform
        draw
------------------------------
update(time)
	move(dt)
		compute next position
------------------------------
// used to know if the projectile should be removed from the list of projectiles
isDead(): bool
kill()
------------------------------
hit(obstacle)
    kill itself
==============================



